// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Netflex.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Netflex.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Netflex.Domain.Entities.Actor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("actor_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biography")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("biography");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<bool>("Gender")
                        .HasColumnType("boolean")
                        .HasColumnName("gender");

                    b.Property<string>("Image")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_actors");

                    b.ToTable("actors", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Episode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("episode_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("air_date");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer")
                        .HasColumnName("episode_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Overview")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("overview");

                    b.Property<TimeSpan?>("Runtime")
                        .HasColumnType("interval")
                        .HasColumnName("runtime");

                    b.Property<long>("SeriesId")
                        .HasColumnType("bigint")
                        .HasColumnName("series_id");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("video_url");

                    b.HasKey("Id")
                        .HasName("pk_episodes");

                    b.HasIndex("SeriesId")
                        .HasDatabaseName("ix_episodes_series_id");

                    b.ToTable("episodes", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Follow", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("TargetId")
                        .HasColumnType("text")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("target_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("UserId", "TargetId", "TargetType")
                        .HasName("pk_follows");

                    b.ToTable("follows", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genres");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_genres_name");

                    b.ToTable("genres", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Keyword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("keyword_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_keywords");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_keywords_name");

                    b.ToTable("keywords", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("movie_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("backdrop_path");

                    b.Property<string>("CountryIso")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("country_iso");

                    b.Property<string>("Overview")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("overview");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("poster_path");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_date");

                    b.Property<TimeSpan?>("RunTime")
                        .HasColumnType("interval")
                        .HasColumnName("run_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("video_url");

                    b.HasKey("Id")
                        .HasName("pk_movies");

                    b.ToTable("movies", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("notification_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.ToTable("notifications", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("permission_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_name");

                    b.ToTable("permissions", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("report_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("Process")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Open")
                        .HasColumnName("process");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("reason");

                    b.HasKey("Id")
                        .HasName("pk_reports");

                    b.ToTable("reports", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Review", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("TargetId")
                        .HasColumnType("text")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("target_type");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("LikeCount")
                        .HasColumnType("integer")
                        .HasColumnName("like_count");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.HasKey("UserId", "TargetId", "TargetType")
                        .HasName("pk_reviews");

                    b.ToTable("reviews", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_name");

                    b.ToTable("roles", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.TVSerie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tv_serie_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("backdrop_path");

                    b.Property<string>("CountryIso")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("country_iso");

                    b.Property<DateTime?>("FirstAirDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_air_date");

                    b.Property<DateTime?>("LastAirDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_air_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Overview")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("overview");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("poster_path");

                    b.HasKey("Id")
                        .HasName("pk_tv_series");

                    b.ToTable("tv_series", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("Version")
                        .HasColumnType("integer")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("provider_key");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.UserNotification", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("notification_id");

                    b.Property<bool>("HaveRead")
                        .HasColumnType("boolean")
                        .HasColumnName("have_read");

                    b.HasKey("UserId", "NotificationId")
                        .HasName("pk_user_notifications");

                    b.HasIndex("NotificationId")
                        .HasDatabaseName("ix_user_notifications_notification_id");

                    b.ToTable("user_notifications", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.UserSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("user_session_id");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("device_info");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<string>("RefreshHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_hash");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_sessions");

                    b.HasIndex("UserId", "DeviceId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_sessions_user_id_device_id")
                        .HasFilter("is_revoked = false");

                    b.ToTable("user_sessions", "dbo");
                });

            modelBuilder.Entity("episode_actors", b =>
                {
                    b.Property<long>("actor_id")
                        .HasColumnType("bigint")
                        .HasColumnName("actor_id");

                    b.Property<long>("episode_id")
                        .HasColumnType("bigint")
                        .HasColumnName("episode_id");

                    b.HasKey("actor_id", "episode_id")
                        .HasName("pk_episode_actors");

                    b.HasIndex("episode_id")
                        .HasDatabaseName("ix_episode_actors_episode_id");

                    b.ToTable("episode_actors", "dbo");
                });

            modelBuilder.Entity("movie_actors", b =>
                {
                    b.Property<long>("actor_id")
                        .HasColumnType("bigint")
                        .HasColumnName("actor_id");

                    b.Property<long>("movie_id")
                        .HasColumnType("bigint")
                        .HasColumnName("movie_id");

                    b.HasKey("actor_id", "movie_id")
                        .HasName("pk_movie_actors");

                    b.HasIndex("movie_id")
                        .HasDatabaseName("ix_movie_actors_movie_id");

                    b.ToTable("movie_actors", "dbo");
                });

            modelBuilder.Entity("movie_genres", b =>
                {
                    b.Property<long>("genre_id")
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    b.Property<long>("movie_id")
                        .HasColumnType("bigint")
                        .HasColumnName("movie_id");

                    b.HasKey("genre_id", "movie_id")
                        .HasName("pk_movie_genres");

                    b.HasIndex("movie_id")
                        .HasDatabaseName("ix_movie_genres_movie_id");

                    b.ToTable("movie_genres", "dbo");
                });

            modelBuilder.Entity("movie_keywords", b =>
                {
                    b.Property<long>("keyword_id")
                        .HasColumnType("bigint")
                        .HasColumnName("keyword_id");

                    b.Property<long>("movie_id")
                        .HasColumnType("bigint")
                        .HasColumnName("movie_id");

                    b.HasKey("keyword_id", "movie_id")
                        .HasName("pk_movie_keywords");

                    b.HasIndex("movie_id")
                        .HasDatabaseName("ix_movie_keywords_movie_id");

                    b.ToTable("movie_keywords", "dbo");
                });

            modelBuilder.Entity("role_permissions", b =>
                {
                    b.Property<string>("permission_id")
                        .HasColumnType("text")
                        .HasColumnName("permission_id");

                    b.Property<string>("role_id")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("permission_id", "role_id")
                        .HasName("pk_role_permissions");

                    b.HasIndex("role_id")
                        .HasDatabaseName("ix_role_permissions_role_id");

                    b.ToTable("role_permissions", "dbo");
                });

            modelBuilder.Entity("tv_serie_genres", b =>
                {
                    b.Property<long>("genre_id")
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    b.Property<long>("tv_serie_id")
                        .HasColumnType("bigint")
                        .HasColumnName("tv_serie_id");

                    b.HasKey("genre_id", "tv_serie_id")
                        .HasName("pk_tv_serie_genres");

                    b.HasIndex("tv_serie_id")
                        .HasDatabaseName("ix_tv_serie_genres_tv_serie_id");

                    b.ToTable("tv_serie_genres", "dbo");
                });

            modelBuilder.Entity("tv_serie_keywords", b =>
                {
                    b.Property<long>("keyword_id")
                        .HasColumnType("bigint")
                        .HasColumnName("keyword_id");

                    b.Property<long>("tv_serie_id")
                        .HasColumnType("bigint")
                        .HasColumnName("tv_serie_id");

                    b.HasKey("keyword_id", "tv_serie_id")
                        .HasName("pk_tv_serie_keywords");

                    b.HasIndex("tv_serie_id")
                        .HasDatabaseName("ix_tv_serie_keywords_tv_serie_id");

                    b.ToTable("tv_serie_keywords", "dbo");
                });

            modelBuilder.Entity("user_permissions", b =>
                {
                    b.Property<string>("permission_id")
                        .HasColumnType("text")
                        .HasColumnName("permission_id");

                    b.Property<string>("user_id")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("permission_id", "user_id")
                        .HasName("pk_user_permissions");

                    b.HasIndex("user_id")
                        .HasDatabaseName("ix_user_permissions_user_id");

                    b.ToTable("user_permissions", "dbo");
                });

            modelBuilder.Entity("user_roles", b =>
                {
                    b.Property<string>("role_id")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<string>("user_id")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("role_id", "user_id")
                        .HasName("pk_user_roles");

                    b.HasIndex("user_id")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", "dbo");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Episode", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.TVSerie", null)
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_episodes_tv_series_series_id");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Follow", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_follows_users_user_id");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.Review", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_users_user_id");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.User", null)
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notifications_notifications_notification_id");

                    b.HasOne("Netflex.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_notifications_users_user_id");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.User", null)
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_sessions_users_user_id");
                });

            modelBuilder.Entity("episode_actors", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("actor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_episode_actors_actors_actor_id");

                    b.HasOne("Netflex.Domain.Entities.Episode", null)
                        .WithMany()
                        .HasForeignKey("episode_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_episode_actors_episodes_episode_id");
                });

            modelBuilder.Entity("movie_actors", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("actor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_actors_actors_actor_id");

                    b.HasOne("Netflex.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("movie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_actors_movies_movie_id");
                });

            modelBuilder.Entity("movie_genres", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("genre_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_genres_genres_genre_id");

                    b.HasOne("Netflex.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("movie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_genres_movies_movie_id");
                });

            modelBuilder.Entity("movie_keywords", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.Keyword", null)
                        .WithMany()
                        .HasForeignKey("keyword_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_keywords_keywords_keyword_id");

                    b.HasOne("Netflex.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("movie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_movie_keywords_movies_movie_id");
                });

            modelBuilder.Entity("role_permissions", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("permission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("Netflex.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");
                });

            modelBuilder.Entity("tv_serie_genres", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("genre_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tv_serie_genres_genres_genre_id");

                    b.HasOne("Netflex.Domain.Entities.TVSerie", null)
                        .WithMany()
                        .HasForeignKey("tv_serie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tv_serie_genres_tv_series_tv_serie_id");
                });

            modelBuilder.Entity("tv_serie_keywords", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.Keyword", null)
                        .WithMany()
                        .HasForeignKey("keyword_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tv_serie_keywords_keywords_keyword_id");

                    b.HasOne("Netflex.Domain.Entities.TVSerie", null)
                        .WithMany()
                        .HasForeignKey("tv_serie_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tv_serie_keywords_tv_series_tv_serie_id");
                });

            modelBuilder.Entity("user_permissions", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("permission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permissions_permissions_permission_id");

                    b.HasOne("Netflex.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permissions_users_user_id");
                });

            modelBuilder.Entity("user_roles", b =>
                {
                    b.HasOne("Netflex.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Netflex.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Netflex.Domain.Entities.User", b =>
                {
                    b.Navigation("UserLogins");

                    b.Navigation("UserSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
